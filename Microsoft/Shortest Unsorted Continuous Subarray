class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        bool is_sorted=true;
        for(int i=0;i<n-1;i++){
            if(nums[i]>nums[i+1]){
                is_sorted = false;
            }
        }
        if(is_sorted) return 0;
        int l=n,r=0;
        stack<int> st;
        for(int i=0;i<n;i++){
            while(st.size()!=0 && nums[st.top()]>nums[i]){
                st.pop();
                if(st.size()>0 ) l = min(l,st.top()+1);
            }
            if(st.size()==0 && i!=0) l=0;
            
            st.push(i);
        }
        while(st.size()!=0) st.pop();
        for(int i=n-1;i>=0;i--){
            while(st.size()!=0 && nums[st.top()]<nums[i]){
                st.pop();
                if(st.size()>0) r=max(r,st.top()-1);
            }
            if(st.size()==0 && i!=n-1) r=n-1;
            
            st.push(i);
        }
        // cout<<l<<" "<<r<<endl;
        return r-l+1;
    }
};
